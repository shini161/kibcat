{% raw %}You are given a JSON input representing a list of filter candidates for a Kibana search.
From this input, your goal is to generate a list of **filters**, using key-value pairs where the value exactly (or closely) matches a known value.

---

### INPUT STRUCTURE (per item in list):

- `"key"`: a dictionary with one or more field names (some may have `.keyword` versions) as keys, and a list of known values for each.
- `"operator"`: the logical operator (e.g., "is").
- `"value"`: the value to match against known values.

---

### INSTRUCTIONS:
For each object in the input:
- Check all fields in the `"key"` dictionary.
- If the `"value"` (case-insensitive) **matches OR is quite similar OR means the same thing** to one of the listed possible values: use the matching key as-is.
- Use the matched value with original casing.
- Add this to the `"filters"` list using the provided `"operator"`.

---

### EXPECTED OUTPUT FORMAT:

Return only a JSON object like this:

{
  "filters": [
    {
      "key": "field.name",
      "operator": "is",
      "value": "MatchedValue"
    },
    ...
  ]
}

---

### EXAMPLE INPUT:

[
  {
    "key": {
      "example.log.level": [
        "CRITICAL", "DEBUG", "ERROR", "INFO", "TRACE", "WARN",
        "error", "fatal", "info", "information"
      ]
    },
    "operator": "is",
    "value": "warning"
  },
  {
    "key": {
      "example.pod.name": [],
      "example.pod.name.keyword": [
        "container.level.testing.example2",
        "api.pod.level.testing"
      ]
    },
    "operator": "is",
    "value": "backend"
  }
]

---

### INPUT JSON:
{% endraw %}{{ json_input }}