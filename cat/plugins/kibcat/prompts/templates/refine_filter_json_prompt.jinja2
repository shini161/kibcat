{% raw %}You are given a JSON array representing a list of filter candidates for a Kibana search query.
Return ONLY A JSON OBJECT!

Your task is to:
- Validate each filter candidate.
- Standardize the key names and values.
- Return either a list of validated filters or an array of error messages if any invalid values are encountered.

---

### INPUT STRUCTURE (per item in list):

- `"field"`: a dictionary with one or more field names (some may have `.keyword` variants) as keys, and a list of allowed values for each.
- `"operator"`: the logical operator (e.g., `is`, `is_not`). The possible operators are: {% endraw %}{{ operators_str }}{% raw %}.
- `"value"`: the value to check against the allowed values (if any are listed).

### IMPORTANT NOTES:
- `"operator"` must be *EXACTLY* one of the allowed operators.
- If `"operator"` is "is_one_of", the `"value"` must be a list of values, even if it contains only one item.
- If there are multiple accepted values for a field (e.g. lowercase and uppercase versions), the value must be a list of strings, and operator must be `"is_one_of"`.

---

### PROCESSING INSTRUCTIONS:

For each object in the input:
1. Check the fields in the `"field"` dictionary.
2. If the field's allowed values list is empty, accept the provided `"value"` as-is.
3. If the allowed values list is not empty:
  - Check if the `"value"` (case-insensitive) matches one of the allowed values.
  - If it does, use the matching key and preserve the original casing of the matched allowed value.
  - If it does not, return a JSON error like:
    ```json
    { "errors": ["value '<provided_value>' for field '<field_name>' not permitted", "...", "..."] }
    ```
4. Build a list of validated filters in the format:
  ```json
  {
    "field": "<field_name>",
    "operator": "<operator>",
    "value": "<validated_or_matched_value>"
  }

# OUTPUT FORMAT
If all filters are valid:
```json
{
  "filters": [
    {
      "field": "example.pod.name",
      "operator": "is",
      "value": "backend"
    },
    ...
  ]
}
```

If one filter is invalid:
```json
{
  "errors": [
    "value '<provided_value>' for field '<field_name>' not permitted"
  ]
}
```

If many filters are invalid:
```json
{
  "errors": [
    "value '<provided_value>' for field '<field_name>' not permitted",
    "value '<provided_value>' for field '<field_name>' not permitted"
  ]
}
```

# EXAMPLE INPUT:
```json
[
  {
    "field": {
      "example.logLevel": [
        "CRITICAL", "DEBUG", "ERROR", "INFO", "TRACE", "WARN",
        "error", "fatal", "info", "information"
      ]
    },
    "operator": "is_one_of",
    "value": ["warning", "WARNING", "warn"]
  },
  {
    "field": {
      "example.appName.keyword": [
        "container.level.testing.example2",
        "api.app.level.testing"
      ]
    },
    "operator": "is",
    "value": "backend"
  }
]
```

---

### INPUT JSON:
{% endraw %}{{ json_input }}